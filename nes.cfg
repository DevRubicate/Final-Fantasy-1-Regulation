MEMORY 
{
    HEADER:     start = $0000,      size = $0010,                       file = %O,      fill = yes,         fillval = $00;
    ZP:         start = $0000,      size = $FF,         type = rw;
    SOUND:      start = $0000,      size = $FF,         type = rw;
    BATTLEZP:   start = $0000,      size = $FF,         type = rw;
    PAGE1:      start = $0100,      size = $100,        type = rw;
    PAGE2:      start = $0200,      size = $100,        type = rw;
    RAM:        start = $0300,      size = $500,        type = rw;
    PARTYGEN:   start = $0300,      size = $500,        type = rw;
    TILESET:    start = $0300,      size = $500,        type = rw;
    MINIMAP:    start = $0300,      size = $500,        type = rw;
    PUZZLE:     start = $0300,      size = $500,        type = rw;
    PRG_RAM:    start = $6000,      size = $2000,       type = rw;
    MINIMAP2:   start = $6000,      size = $2000,       type = rw;
    BATTLE:     start = $6000,      size = $2000,       type = rw;
    MAPOBJ:     start = $6000,      size = $2000,       type = rw;
    MAPDATA:    start = $6000,      size = $2000,       type = rw;
    THEEND:     start = $6000,      size = $2000,       type = rw;

    EXTRA:      start = $5C00,      size = $400,        type = rw;

    MEM_00:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $0;
    MEM_01:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1;
    MEM_02:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $2;
    MEM_03:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $3;
    MEM_04:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $4;
    MEM_05:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $5;
    MEM_06:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $6;
    MEM_07:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $7;
    MEM_08:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $8;
    MEM_09:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $9;
    MEM_0A:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $A;
    MEM_0B:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $B;
    MEM_0C:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $C;
    MEM_0D:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $D;
    MEM_0E:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $E;
    MEM_0F:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $F;
    MEM_10:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $10;
    MEM_11:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $11;
    MEM_12:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $12;
    MEM_13:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $13;
    MEM_14:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $14;
    MEM_15:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $15;
    MEM_16:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $16;
    MEM_17:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $17;
    MEM_18:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $18;
    MEM_19:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $19;
    MEM_1A:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1A;
    MEM_1B:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1B;
    MEM_1C:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1C;
    MEM_1D:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1D;
    MEM_1E:     start = $8000,      size = $4000,       file = %O,      fill = yes,     fillval = $00,      bank = $1E;
    MEM_FIXED:  start = $C000,      size = $4000,       file = %O,      fill = yes,     fillval = $00;
}

SEGMENTS 
{
    INESHDR:    load = HEADER,      type = ro, align = $0010 ;
    ZEROPAGE:   load = ZP,          type = zp;
    SOUND:      load = SOUND,       type = zp;
    BATTLEZP:   load = BATTLEZP,    type = zp;
    STACK:      load = PAGE1,       type = bss;
    OAM:        load = PAGE2,       type = bss;
    BSS:        load = RAM,         type = bss;
    PARTYGEN:   load = PARTYGEN,    type = bss;
    TILESET:    load = TILESET,     type = bss;
    MINIMAP:    load = MINIMAP,     type = bss;
    MINIMAP2:   load = MINIMAP2,    type = bss;
    PUZZLE:     load = PUZZLE,      type = bss;
    MAPOBJ:     load = MAPOBJ,      type = bss;
    MAPDATA:    load = MAPDATA,     type = bss;
    BATTLE:     load = BATTLE,      type = bss;
    THEEND:     load = THEEND,      type = bss;
    PRG_RAM:    load = PRG_RAM,     type = bss;
    EXTRA:      load = EXTRA,       type = bss;
    BANK_00:    load = MEM_00,      type = ro,      align = $4000;
    BANK_01:    load = MEM_01,      type = ro,      align = $4000;
    BANK_02:    load = MEM_02,      type = ro,      align = $4000;
    BANK_03:    load = MEM_03,      type = ro,      align = $4000;
    BANK_04:    load = MEM_04,      type = ro,      align = $4000;
    BANK_05:    load = MEM_05,      type = ro,      align = $4000;
    BANK_06:    load = MEM_06,      type = ro,      align = $4000;
    BANK_07:    load = MEM_07,      type = ro,      align = $4000;
    BANK_08:    load = MEM_08,      type = ro,      align = $4000;
    BANK_09:    load = MEM_09,      type = ro,      align = $4000;
    BANK_0A:    load = MEM_0A,      type = ro,      align = $4000;
    BANK_0B:    load = MEM_0B,      type = ro,      align = $4000;
    BANK_0C:    load = MEM_0C,      type = ro,      align = $4000;
    BANK_0D:    load = MEM_0D,      type = ro,      align = $4000;
    BANK_0E:    load = MEM_0E,      type = ro,      align = $4000;
    BANK_0F:    load = MEM_0F,      type = ro,      align = $4000;
    BANK_10:    load = MEM_10,      type = ro,      align = $4000;
    BANK_11:    load = MEM_11,      type = ro,      align = $4000;
    BANK_12:    load = MEM_12,      type = ro,      align = $4000;
    BANK_13:    load = MEM_13,      type = ro,      align = $4000;
    BANK_14:    load = MEM_14,      type = ro,      align = $4000;
    BANK_15:    load = MEM_15,      type = ro,      align = $4000;
    BANK_16:    load = MEM_16,      type = ro,      align = $4000;
    BANK_17:    load = MEM_17,      type = ro,      align = $4000;
    BANK_18:    load = MEM_18,      type = ro,      align = $4000;
    BANK_19:    load = MEM_19,      type = ro,      align = $4000;
    BANK_1A:    load = MEM_1A,      type = ro,      align = $4000;
    BANK_1B:    load = MEM_1B,      type = ro,      align = $4000;
    BANK_1C:    load = MEM_1C,      type = ro,      align = $4000;
    BANK_1D:    load = MEM_1D,      type = ro,      align = $4000;
    BANK_1E:    load = MEM_1E,      type = ro,      align = $4000;
    BANK_FIXED: load = MEM_FIXED,   type = ro,      align = $4000;
    VECTORS:    load = MEM_FIXED,   type = ro,      start = $FFFA;
}
