/**
 * NES Palette utilities for color matching and conversion
 */

export interface NESColor {
    id: number;
    r: number;
    g: number;
    b: number;
}

/**
 * Build the complete NES hardware color palette
 */
export function buildNESPalette(): NESColor[] {
    const palette: NESColor[] = [
        { id: 0x00, r: 0x62, g: 0x62, b: 0x62 },
        { id: 0x01, r: 0x00, g: 0x1C, b: 0x95 },
        { id: 0x02, r: 0x19, g: 0x04, b: 0xAC },
        { id: 0x03, r: 0x42, g: 0x00, b: 0x9D },
        { id: 0x04, r: 0x61, g: 0x00, b: 0x6B },
        { id: 0x05, r: 0x6E, g: 0x00, b: 0x25 },
        { id: 0x06, r: 0x65, g: 0x05, b: 0x00 },
        { id: 0x07, r: 0x49, g: 0x1E, b: 0x00 },
        { id: 0x08, r: 0x22, g: 0x37, b: 0x00 },
        { id: 0x09, r: 0x00, g: 0x49, b: 0x00 },
        { id: 0x0A, r: 0x00, g: 0x4F, b: 0x00 },
        { id: 0x0B, r: 0x00, g: 0x48, b: 0x16 },
        { id: 0x0C, r: 0x00, g: 0x35, b: 0x5E },
        { id: 0x0F, r: 0x00, g: 0x00, b: 0x00 },
        { id: 0x10, r: 0xAB, g: 0xAB, b: 0xAB },
        { id: 0x11, r: 0x0C, g: 0x4E, b: 0xDB },
        { id: 0x12, r: 0x3D, g: 0x2E, b: 0xFF },
        { id: 0x13, r: 0x71, g: 0x15, b: 0xF3 },
        { id: 0x14, r: 0x9B, g: 0x0B, b: 0xB9 },
        { id: 0x15, r: 0xB0, g: 0x12, b: 0x62 },
        { id: 0x16, r: 0xA9, g: 0x27, b: 0x04 },
        { id: 0x17, r: 0x89, g: 0x46, b: 0x00 },
        { id: 0x18, r: 0x57, g: 0x66, b: 0x00 },
        { id: 0x19, r: 0x23, g: 0x7F, b: 0x00 },
        { id: 0x1A, r: 0x00, g: 0x89, b: 0x00 },
        { id: 0x1B, r: 0x00, g: 0x83, b: 0x32 },
        { id: 0x1C, r: 0x00, g: 0x6D, b: 0x90 },
        { id: 0x20, r: 0xFF, g: 0xFF, b: 0xFF },
        { id: 0x21, r: 0x57, g: 0xA5, b: 0xFF },
        { id: 0x22, r: 0x82, g: 0x87, b: 0xFF },
        { id: 0x23, r: 0xB4, g: 0x6D, b: 0xFF },
        { id: 0x24, r: 0xDF, g: 0x60, b: 0xFF },
        { id: 0x25, r: 0xF8, g: 0x63, b: 0xC6 },
        { id: 0x26, r: 0xF8, g: 0x74, b: 0x6D },
        { id: 0x27, r: 0xDE, g: 0x90, b: 0x20 },
        { id: 0x28, r: 0xB3, g: 0xAE, b: 0x00 },
        { id: 0x29, r: 0x81, g: 0xC8, b: 0x00 },
        { id: 0x2A, r: 0x56, g: 0xD5, b: 0x22 },
        { id: 0x2B, r: 0x3D, g: 0xD3, b: 0x6F },
        { id: 0x2C, r: 0x3E, g: 0xC1, b: 0xC8 },
        { id: 0x2D, r: 0x4E, g: 0x4E, b: 0x4E },
        { id: 0x30, r: 0xFF, g: 0xFF, b: 0xFF },
        { id: 0x31, r: 0xBE, g: 0xE0, b: 0xFF },
        { id: 0x32, r: 0xCD, g: 0xD4, b: 0xFF },
        { id: 0x33, r: 0xE0, g: 0xCA, b: 0xFF },
        { id: 0x34, r: 0xF1, g: 0xC4, b: 0xFF },
        { id: 0x35, r: 0xFC, g: 0xC4, b: 0xEF },
        { id: 0x36, r: 0xFD, g: 0xCA, b: 0xCE },
        { id: 0x37, r: 0xF5, g: 0xD4, b: 0xAF },
        { id: 0x38, r: 0xE6, g: 0xDF, b: 0x9C },
        { id: 0x39, r: 0xD3, g: 0xE9, b: 0x9A },
        { id: 0x3A, r: 0xC2, g: 0xEF, b: 0xA8 },
        { id: 0x3B, r: 0xB7, g: 0xEF, b: 0xC4 },
        { id: 0x3C, r: 0xB6, g: 0xEA, b: 0xE5 },
        { id: 0x3D, r: 0xB8, g: 0xB8, b: 0xB8 }
    ];
    return palette;
}

/**
 * Find closest NES color for given RGB values
 */
export function findClosestNESColor(nesPalette: NESColor[], r: number, g: number, b: number): NESColor {
    let closestColor = nesPalette[0];
    let minDistance = Infinity;

    for (const nesColor of nesPalette) {
        // Calculate Euclidean distance in RGB space
        const deltaR = r - nesColor.r;
        const deltaG = g - nesColor.g;
        const deltaB = b - nesColor.b;
        const distance = Math.sqrt(deltaR * deltaR + deltaG * deltaG + deltaB * deltaB);

        if (distance < minDistance) {
            minDistance = distance;
            closestColor = nesColor;
        }
    }

    return closestColor;
}